#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const xml2js = require('xml2js');
const packageJson = require('../package.json');

// Save dependencies with no version and then dependencies with scripts
var newPackageJson = {
  description: "This file is autogenerated after each npm install. Do not manually edit or throw away this file. It is used for optimizing docker builds",
  dependencies: packageJson.dependencies,
  devDependencies: packageJson.devDependencies,
  resolutions: packageJson.resolutions,
  cordovaPlugins: packageJson.cordovaPlugins,
  cordovaPlatforms: packageJson.cordovaPlatforms,
  cordova: packageJson.cordova
};

var packageWithScripts = Object.assign({}, newPackageJson, { scripts: {
  'add-platforms': packageJson.scripts['add-platforms'],
  'add-browser': packageJson.scripts['add-browser'],
  'rm-browser': packageJson.scripts['rm-browser'],
  'browser': packageJson.scripts['browser']
} });

var root = path.resolve(__dirname, '../');
var dependencies = path.join(root, 'docker', 'dependencies.json');
var dependenciesScripts = path.join(root, 'docker', 'dependencies-scripts.json');

fs.writeFileSync(dependencies, JSON.stringify(newPackageJson, null, 4), 'utf-8');
fs.writeFileSync(dependenciesScripts, JSON.stringify(packageWithScripts, null, 4), 'utf-8');

// Save config.xml with no version
var parser = new xml2js.Parser();
var builder = new xml2js.Builder();
var configPath = path.join(root, 'config.xml');
var cleanConfigPath = path.join(root, 'docker', 'config.xml');

fs.readFile(configPath, function(err, data) {
  parser.parseString(data, function (err, result) {
    var json = result;

    // clear the version attribute in the xml
    json.widget.$.version = '';

    // our new versionless config.xml
    var xml = builder.buildObject(json);

    fs.writeFileSync(cleanConfigPath, xml);
  });
});
